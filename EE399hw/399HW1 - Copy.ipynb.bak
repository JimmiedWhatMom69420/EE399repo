{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "412b3771",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Consider the data from lecture on 3/31:\n",
    "# X=np.arange(0,31)\n",
    "# Y=np.array([30, 35, 33, 32, 34, 37, 39, 38, 36, 36, 37, 39, 42, 45, 45, 41,\n",
    "# 40, 39, 42, 44, 47, 49, 50, 49, 46, 48, 50, 53, 55, 54, 53])\n",
    "# Fit the following model to the data with least-squares error\n",
    "# (i) Write a code to find the minimum error and determine the parameters A, B, C, D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "510739d3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "A = 2.1717269828948855\n",
      "B = 0.909325796914226\n",
      "C = 0.7324885143513572\n",
      "D = 31.452772437053802\n",
      "Minimum error: 1.5927258503103892\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "\n",
    "# Define the function to fit\n",
    "def func(x, A, B, C, D):\n",
    "    return A * np.cos(B * x) + C * x + D\n",
    "\n",
    "\n",
    "\n",
    "# Define the data\n",
    "X = np.arange(0, 31)\n",
    "Y = np.array([30, 35, 33, 32, 34, 37, 39, 38, 36, 36, 37, 39, 42, 45, 45, 41,\n",
    "              40, 39, 42, 44, 47, 49, 50, 49, 46, 48, 50, 53, 55, 54, 53])\n",
    "\n",
    "# initial guesses for parameters A,B,C,D\n",
    "initial_guess = [1,1,1,1]\n",
    "\n",
    "# Fit the function to the data\n",
    "popt, pcov = curve_fit(func, X, Y, initial_guess)\n",
    "\n",
    "# Extract the parameters\n",
    "A, B, C, D = popt\n",
    "\n",
    "# Print the parameters\n",
    "print(\"A =\", A)\n",
    "print(\"B =\", B)\n",
    "print(\"C =\", C)\n",
    "print(\"D =\", D)\n",
    "\n",
    "# Calculate the minimum error\n",
    "n = len(X) #31\n",
    "\n",
    "# Y_fit = func(X, A, B, C, D)\n",
    "error = np.sqrt(np.sum((func(X, A, B, C, D) - Y)**2) / n)\n",
    "print(\"Minimum error:\", error)\n",
    "\n",
    "tt = np.arange(1, 31.01, 0.01) #x axis\n",
    "yfit = (A*np.cos(B*tt)+C*tt+D) #y axis\n",
    "\n",
    "# Plot the data and the fitted function\n",
    "plt.plot(np.arange(1, 32), Y, 'ko')\n",
    "plt.plot(tt, yfit, 'r-')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "071cf7a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# A = 2.1717269828948855\n",
    "# B = 0.909325796914226\n",
    "# C = 0.7324885143513572\n",
    "# D = 31.452772437053802\n",
    "# Minimum error: 1.5927258503103892"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1c613f69",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'X_grid' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[8], line 32\u001b[0m\n\u001b[0;32m     29\u001b[0m \u001b[38;5;66;03m# Visualize the results as a grid\u001b[39;00m\n\u001b[0;32m     30\u001b[0m \u001b[38;5;66;03m# X_grid, Y_grid = np.meshgrid(D_values, C_values)\u001b[39;00m\n\u001b[0;32m     31\u001b[0m fig, ax \u001b[38;5;241m=\u001b[39m plt\u001b[38;5;241m.\u001b[39msubplots()\n\u001b[1;32m---> 32\u001b[0m plt\u001b[38;5;241m.\u001b[39mpcolor(\u001b[43mX_grid\u001b[49m, Y_grid, loss, cmap\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mviridis\u001b[39m\u001b[38;5;124m'\u001b[39m) \u001b[38;5;66;03m#viridis coolwarm\u001b[39;00m\n\u001b[0;32m     33\u001b[0m plt\u001b[38;5;241m.\u001b[39mtitle(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mSweep A & B, Fix C & D\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m     34\u001b[0m plt\u001b[38;5;241m.\u001b[39mxlabel(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mA\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "\u001b[1;31mNameError\u001b[0m: name 'X_grid' is not defined"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# (ii) With the results of (i), fix two of the parameters and sweep through values of the\n",
    "# other two parameters to generate a 2D loss (error) landscape. Do all combinations of\n",
    "# two fixed parameters and two swept parameters. You can use something like pcolor to\n",
    "# visualize the results in a grid. How many minima can you find as you sweep through\n",
    "# parameters?\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define the function to fit\n",
    "def func(x, A, B, C, D):\n",
    "    return A * np.cos(B * x) + C * x + D\n",
    "\n",
    "# Define the data\n",
    "X = np.arange(0, 31)\n",
    "Y = np.array([30, 35, 33, 32, 34, 37, 39, 38, 36, 36, 37, 39, 42, 45, 45, 41,\n",
    "              40, 39, 42, 44, 47, 49, 50, 49, 46, 48, 50, 53, 55, 54, 53])\n",
    "\n",
    "# Sweep through 2 parameters (A,B) and fix two parameters (C,D)\n",
    "A_vals = np.linspace(0, 2, 100)\n",
    "B_vals = np.linspace(0, 2, 100)\n",
    "C_fixed = C = 0.5\n",
    "D_fixed = D = 40.0\n",
    "error_vals = np.zeros((len(A_vals), len(B_vals)))\n",
    "for i, A in enumerate(A_vals):\n",
    "    for j, B in enumerate(B_vals):\n",
    "        Y_fit = func(X, A, B, C, D)\n",
    "        error_vals[i, j] = np.sqrt(np.sum((Y - Y_fit)**2) / len(X))\n",
    "\n",
    "# Visualize the results as a grid\n",
    "# X_grid, Y_grid = np.meshgrid(D_values, C_values)\n",
    "fig, ax = plt.subplots()\n",
    "plt.pcolor(X_grid, Y_grid, loss, cmap='viridis') #viridis coolwarm\n",
    "plt.title('Sweep A & B, Fix C & D')\n",
    "plt.xlabel('A')\n",
    "plt.ylabel('B')\n",
    "plt.colorbar()\n",
    "# plt.title('2D Loss Landscape for f(x) = A cos(Bx) + Cx + D with A={}, B={}'.format(A, B))\n",
    "plt.show()\n",
    "###################\n",
    "# Fix two parameters and sweep through the other two parameters\n",
    "C_vals = np.linspace(0, 2, 100)\n",
    "D_vals = np.linspace(30, 50, 100)\n",
    "A_fixed = A = 1.0\n",
    "B_fixed = B = 1.0\n",
    "error_vals = np.zeros((len(C_vals), len(D_vals)))\n",
    "for i, C in enumerate(C_vals):\n",
    "    for j, D in enumerate(D_vals):\n",
    "        Y_fit = func(X, A, B, C, D)\n",
    "        error_vals[i, j] = np.sqrt(np.sum((Y_fit - Y) ** 2) / len(X))\n",
    "\n",
    "# Visualize the results\n",
    "fig, ax = plt.subplots()\n",
    "plt.pcolor(C_vals, D_vals, error_vals, cmap='viridis')\n",
    "plt.xlabel('C')\n",
    "plt.ylabel('D')\n",
    "plt.title('Sweep C & D Fix A & B')\n",
    "plt.colorbar()\n",
    "plt.show()\n",
    "######################\n",
    "# Sweep through 2 parameters (A,B) and fix two parameters (C,D)\n",
    "A_vals = np.linspace(0, 2, 100)\n",
    "C_vals = np.linspace(0, 2, 100)\n",
    "B_fixed = B = 1.0\n",
    "D_fixed = D = 1.0\n",
    "error_vals = np.zeros((len(A_vals), len(C_vals)))\n",
    "for i, A in enumerate(A_vals):\n",
    "    for j, C in enumerate(C_vals):\n",
    "        Y_fit = func(X, A, B, C, D)\n",
    "        error_vals[i, j] = np.sqrt(np.sum((Y - Y_fit)**2) / len(X))\n",
    "\n",
    "# Visualize the results as a grid\n",
    "# X_grid, Y_grid = np.meshgrid(D_values, C_values)\n",
    "fig, ax = plt.subplots()\n",
    "plt.pcolor(X_grid, Y_grid, loss, cmap='viridis') #viridis coolwarm\n",
    "# plt.colorbar()\n",
    "plt.xlabel('A')\n",
    "plt.ylabel('C')\n",
    "plt.title('Sweep A,C; Fix: B,D')\n",
    "plt.colorbar()\n",
    "# plt.title('2D Loss Landscape for f(x) = A cos(Bx) + Cx + D with A={}, B={}'.format(A, B))\n",
    "plt.show()\n",
    "######################\n",
    "# Sweep through 2 parameters (A,B) and fix two parameters (C,D)\n",
    "A_vals = np.linspace(0, 2, 100)\n",
    "D_vals = np.linspace(0, 2, 100)\n",
    "B_fixed = B = 1.0\n",
    "C_fixed = C = 0.5\n",
    "error_vals = np.zeros((len(A_vals), len(D_vals)))\n",
    "for i, A in enumerate(A_vals):\n",
    "    for j, D in enumerate(D_vals):\n",
    "        Y_fit = func(X, A, B, C, D)\n",
    "        error_vals[i, j] = np.sqrt(np.sum((Y - Y_fit)**2) / len(X))\n",
    "\n",
    "# Visualize the results as a grid\n",
    "# X_grid, Y_grid = np.meshgrid(D_values, C_values)\n",
    "fig, ax = plt.subplots()\n",
    "plt.pcolor(X_grid, Y_grid, loss, cmap='viridis') #viridis coolwarm\n",
    "# plt.colorbar()\n",
    "plt.xlabel('A')\n",
    "plt.ylabel('D')\n",
    "plt.title('Sweep A,D; Fix B,C')\n",
    "plt.colorbar()\n",
    "# plt.title('2D Loss Landscape for f(x) = A cos(Bx) + Cx + D with A={}, B={}'.format(A, B))\n",
    "plt.show()\n",
    "######################\n",
    "# Sweep through 2 parameters (A,B) and fix two parameters (C,D)\n",
    "B_vals = np.linspace(0, 2, 100)\n",
    "C_vals = np.linspace(0, 2, 100)\n",
    "A_fixed = A = 1.0\n",
    "D_fixed = D = 0.5\n",
    "error_vals = np.zeros((len(B_vals), len(C_vals)))\n",
    "for i, B in enumerate(B_vals):\n",
    "    for j, C in enumerate(C_vals):\n",
    "        Y_fit = func(X, A, B, C, D)\n",
    "        error_vals[i, j] = np.sqrt(np.sum((Y - Y_fit)**2) / len(X))\n",
    "\n",
    "# Visualize the results as a grid\n",
    "# X_grid, Y_grid = np.meshgrid(D_values, C_values)\n",
    "fig, ax = plt.subplots()\n",
    "plt.pcolor(X_grid, Y_grid, loss, cmap='viridis') #viridis coolwarm\n",
    "# plt.colorbar()\n",
    "plt.title('Sweep B,C; Fix A,D')\n",
    "plt.xlabel('B')\n",
    "plt.ylabel('C')\n",
    "plt.colorbar()\n",
    "# plt.title('2D Loss Landscape for f(x) = A cos(Bx) + Cx + D with A={}, B={}'.format(A, B))\n",
    "plt.show()\n",
    "#############\n",
    "# Sweep through 2 parameters (A,B) and fix two parameters (C,D)\n",
    "B_vals = np.linspace(0, 2, 100)\n",
    "D_vals = np.linspace(0, 2, 100)\n",
    "A_fixed = A = 1.0\n",
    "C_fixed = C = 0.5\n",
    "error_vals = np.zeros((len(B_vals), len(D_vals)))\n",
    "for i, B in enumerate(B_vals):\n",
    "    for j, D in enumerate(D_vals):\n",
    "        Y_fit = func(X, A, B, C, D)\n",
    "        error_vals[i, j] = np.sqrt(np.sum((Y - Y_fit)**2) / len(X))\n",
    "\n",
    "# Visualize the results as a grid\n",
    "# X_grid, Y_grid = np.meshgrid(D_values, C_values)\n",
    "fig, ax = plt.subplots()\n",
    "plt.pcolor(X_grid, Y_grid, loss, cmap='viridis') #viridis coolwarm\n",
    "# plt.colorbar()\n",
    "plt.title('Sweep B,D, Fix A,C')\n",
    "plt.xlabel('B')\n",
    "plt.ylabel('D')\n",
    "plt.colorbar()\n",
    "# plt.title('2D Loss Landscape for f(x) = A cos(Bx) + Cx + D with A={}, B={}'.format(A, B))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "9180937f",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TestTwo\\anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3460: RankWarning: Polyfit may be poorly conditioned\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training errors:\n",
      "Line error: 2.242749386808538\n",
      "Parabola error: 2.1255393482773766\n",
      "19th-degree polynomial error: 0.028351503968806435\n",
      "\n",
      "Test errors:\n",
      "Line error: 3.36363873604787\n",
      "Parabola error: 8.713651781874919\n",
      "19th-degree polynomial error: 28617752784.428474\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# (iii) \n",
    "# iii) Using the first 20 data points as training data, fit a line, parabola and 19th degree\n",
    "# polynomial to the data. Compute the least-square error for each of these over the training\n",
    "# points. Then compute the least square error of these models on the test data which are\n",
    "# the remaining 10 data points\n",
    "# fit a line to the first 20 data points\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define the data\n",
    "X = np.arange(0, 31)\n",
    "Y = np.array([30, 35, 33, 32, 34, 37, 39, 38, 36, 36, 37, 39, 42, 45, 45, 41,\n",
    "              40, 39, 42, 44, 47, 49, 50, 49, 46, 48, 50, 53, 55, 54, 53])\n",
    "\n",
    "# Split the data into training and test sets\n",
    "X_train, Y_train = X[:20], Y[:20]\n",
    "X_test, Y_test = X[20:], Y[20:]\n",
    "\n",
    "# Fit a line to the training data\n",
    "p1 = np.polyfit(X_train, Y_train, deg=1)\n",
    "Y_train_line = np.polyval(p1, X_train)\n",
    "Y_test_line = np.polyval(p1, X_test)\n",
    "line_error_train = np.sqrt(np.mean((Y_train_line - Y_train) ** 2))\n",
    "line_error_test = np.sqrt(np.mean((Y_test_line - Y_test) ** 2))\n",
    "\n",
    "# Fit a parabola to the training data\n",
    "p2 = np.polyfit(X_train, Y_train, deg=2)\n",
    "Y_train_parabola = np.polyval(p2, X_train)\n",
    "Y_test_parabola = np.polyval(p2, X_test)\n",
    "parabola_error_train = np.sqrt(np.mean((Y_train_parabola - Y_train) ** 2))\n",
    "parabola_error_test = np.sqrt(np.mean((Y_test_parabola - Y_test) ** 2))\n",
    "\n",
    "# Fit a 19th-degree polynomial to the training data\n",
    "p19 = np.polyfit(X_train, Y_train, deg=19)\n",
    "Y_train_poly = np.polyval(p19, X_train)\n",
    "Y_test_poly = np.polyval(p19, X_test)\n",
    "poly_error_train = np.sqrt(np.mean((Y_train_poly - Y_train) ** 2))\n",
    "poly_error_test = np.sqrt(np.mean((Y_test_poly - Y_test) ** 2))\n",
    "\n",
    "# Print the least-squares errors\n",
    "print(\"Training errors:\")\n",
    "print(\"Line error:\", line_error_train)\n",
    "print(\"Parabola error:\", parabola_error_train)\n",
    "print(\"19th-degree polynomial error:\", poly_error_train)\n",
    "print()\n",
    "print(\"Test errors:\")\n",
    "print(\"Line error:\", line_error_test)\n",
    "print(\"Parabola error:\", parabola_error_test)\n",
    "print(\"19th-degree polynomial error:\", poly_error_test)\n",
    "\n",
    "# Plot the data and the fitted curves\n",
    "plt.scatter(X_train, Y_train, label='Training data')\n",
    "plt.scatter(X_test, Y_test, label='Test data')\n",
    "plt.plot(X_train, Y_train_line, label='Line')\n",
    "plt.plot(X_train, Y_train_parabola, label='Parabola')\n",
    "plt.plot(X_train, Y_train_poly, label='19th-degree polynomial')\n",
    "plt.xlabel('X')\n",
    "plt.ylabel('Y')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "\n",
    "# p1 = np.polyfit(X[:20], Y[:20], deg=1)\n",
    "# y_train_p1 = np.polyval(p1, X[:20])\n",
    "# y_test_p1 = np.polyval(p1, X[20:])\n",
    "# train_err_p1 = np.sum((y_train_p1 - Y[:20])**2)\n",
    "# test_err_p1 = np.sum((y_test_p1 - Y[20:])**2)\n",
    "\n",
    "# # fit a parabola to the first 20 data points\n",
    "# p2 = np.polyfit(X[:20], Y[:20], deg=2)\n",
    "# y_train_p2 = np.polyval(p2, X[:20])\n",
    "# y_test_p2 = np.polyval(p2, X[20:])\n",
    "# train_err_p2 = np.sum((y_train_p2 - Y[:20])**2)\n",
    "# test_err_p2 = np.sum((y_test_p2 - Y[20:])**2)\n",
    "\n",
    "# # fit a 19th degree polynomial to the first 20 data points\n",
    "# p19 = np.polyfit(X[:20], Y[:20], deg=19)\n",
    "# y_train_p19 = np.polyval(p19, X[:20])\n",
    "# y_test_p19 = np.polyval(p19, X[20:])\n",
    "# train_err_p19 = np.sum((y_train_p19 - Y[:20])**2)\n",
    "# test_err_p19 = np.sum((y_test_p19 - Y[20:])**2)\n",
    "\n",
    "# print(\"Training errors:\")\n",
    "# print(f\"Line: {train_err_p1}\")\n",
    "# print(f\"Parabola: {train_err_p2}\")\n",
    "# print(f\"19th degree polynomial: {train_err_p19}\")\n",
    "# print(\"\\nTest errors:\")\n",
    "# print(f\"Line: {test_err_p1}\")\n",
    "# print(f\"Parabola: {test_err_p2}\")\n",
    "# print(f\"19th degree polynomial: {test_err_p19}\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2bce6c6b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\TestTwo\\anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3460: RankWarning: Polyfit may be poorly conditioned\n",
      "  exec(code_obj, self.user_global_ns, self.user_ns)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training errors:\n",
      "Line error: 1.851669904329375\n",
      "Parabola error: 1.8508364115957907\n",
      "19th-degree polynomial error: 0.1638133765080727\n",
      "\n",
      "Test errors:\n",
      "Line error: 2.8065076975181618\n",
      "Parabola error: 2.774982896893291\n",
      "19th-degree polynomial error: 483.9099124568562\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# (iv)\n",
    "# (iv) Repeat (iii) but use the first 10 and last 10 data points as training data. Then fit the\n",
    "# model to the test data (which are the 10 held out middle data points). Compare these\n",
    "# results to (iii) \n",
    "# use the first 10 and last 10 data points as training data\n",
    "\n",
    "\n",
    "X_train = np.concatenate((X[:10], X[-10:]))\n",
    "Y_train = np.concatenate((Y[:10], Y[-10:]))\n",
    "\n",
    "# (iii) \n",
    "# iii) Using the first 20 data points as training data, fit a line, parabola and 19th degree\n",
    "# polynomial to the data. Compute the least-square error for each of these over the training\n",
    "# points. Then compute the least square error of these models on the test data which are\n",
    "# the remaining 10 data points\n",
    "# fit a line to the first 20 data points\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Define the data\n",
    "X = np.arange(0, 31)\n",
    "Y = np.array([30, 35, 33, 32, 34, 37, 39, 38, 36, 36, 37, 39, 42, 45, 45, 41,\n",
    "              40, 39, 42, 44, 47, 49, 50, 49, 46, 48, 50, 53, 55, 54, 53])\n",
    "\n",
    "# Split the data into training and test sets\n",
    "# X_train, Y_train = X[:20], Y[:20]\n",
    "# X_test, Y_test = X[20:], Y[20:]\n",
    "X_train = np.concatenate((X[:10], X[-10:]))\n",
    "Y_train = np.concatenate((Y[:10], Y[-10:]))\n",
    "X_test = X[10:-10]\n",
    "Y_test = Y[10:-10]\n",
    "\n",
    "# Fit a line to the training data\n",
    "p1 = np.polyfit(X_train, Y_train, deg=1)\n",
    "Y_train_line = np.polyval(p1, X_train)\n",
    "Y_test_line = np.polyval(p1, X_test)\n",
    "line_error_train = np.sqrt(np.mean((Y_train_line - Y_train) ** 2))\n",
    "line_error_test = np.sqrt(np.mean((Y_test_line - Y_test) ** 2))\n",
    "\n",
    "# Fit a parabola to the training data\n",
    "p2 = np.polyfit(X_train, Y_train, deg=2)\n",
    "Y_train_parabola = np.polyval(p2, X_train)\n",
    "Y_test_parabola = np.polyval(p2, X_test)\n",
    "parabola_error_train = np.sqrt(np.mean((Y_train_parabola - Y_train) ** 2))\n",
    "parabola_error_test = np.sqrt(np.mean((Y_test_parabola - Y_test) ** 2))\n",
    "\n",
    "# Fit a 19th-degree polynomial to the training data\n",
    "p19 = np.polyfit(X_train, Y_train, deg=19)\n",
    "Y_train_poly = np.polyval(p19, X_train)\n",
    "Y_test_poly = np.polyval(p19, X_test)\n",
    "poly_error_train = np.sqrt(np.mean((Y_train_poly - Y_train) ** 2))\n",
    "poly_error_test = np.sqrt(np.mean((Y_test_poly - Y_test) ** 2))\n",
    "\n",
    "# Print the least-squares errors\n",
    "print(\"Training errors:\")\n",
    "print(\"Line error:\", line_error_train)\n",
    "print(\"Parabola error:\", parabola_error_train)\n",
    "print(\"19th-degree polynomial error:\", poly_error_train)\n",
    "print()\n",
    "print(\"Test errors:\")\n",
    "print(\"Line error:\", line_error_test)\n",
    "print(\"Parabola error:\", parabola_error_test)\n",
    "print(\"19th-degree polynomial error:\", poly_error_test)\n",
    "\n",
    "# Plot the data and the fitted curves\n",
    "plt.scatter(X_train, Y_train, label='Training data')\n",
    "plt.scatter(X_test, Y_test, label='Test data')\n",
    "plt.plot(X_train, Y_train_line, label='Line')\n",
    "plt.plot(X_train, Y_train_parabola, label='Parabola')\n",
    "plt.plot(X_train, Y_train_poly, label='19th-degree polynomial')\n",
    "plt.xlabel('X')\n",
    "plt.ylabel('Y')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
